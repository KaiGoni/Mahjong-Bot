{
	"Sapphire Slash Command": {
		"prefix": "sapphireslashcmd",
		"body": [
			"import { Command, ChatInputCommand } from \"@sapphire/framework\";",
			"",
			"export class ${1:Ping}Command extends Command {",
			"  public constructor(context: Command.Context, options: Command.Options) {",
			"    super(context, {",
			"      ...options,",
			"      requiredUserPermissions: [\"SendMessages\"],",
			"      requiredClientPermissions: [\"SendMessages\"],",
			"    });",
			"  }",
			"",
			"  public override registerApplicationCommands(",
			"    registry: ChatInputCommand.Registry",
			"  ) {",
			"    registry.registerChatInputCommand(",
			"      (builder) =>",
			"        builder",
			"          .setName(\"${2:ping}\")",
			"          .setDescription(\"${3:Check the latency of the bot}\")",
			"      // { guildIds: [ 'TESTID' ] }, // Uncomment this line to register the command in a specific guild",
			"    );",
			"  }",
			"",
			"  public chatInputRun(interaction: Command.ChatInputCommandInteraction) {",
			"    $0",
			"  }",
			"}",
			""
		],
		"description": "Sapphire Slash Command"
	},
	"Sapphire Listener": {
		"prefix": "sapphirelistener",
		"body": [
			"import { Listener, Events, container } from '@sapphire/framework';",
			"import { Client } from 'discord.js';",
			"",
			"export class {1:Ready}Listener extends Listener {",
			"  public constructor(context: Listener.Context, options: Listener.Options) {",
			"    super(context, {",
			"      ...options,",
			"      // emitter: container.client,",
			"      once: {2:false}, // Allow feature to run only once",
			"      event: {3:Events.ClientReady},",
			"    });",
			"  }",
			"  public run(client: Client) {",
			"    $0",
			"  }",
			"}"
		],
		"description": "Sapphire Listener"
	},
	"Sapphire Slash Subcommand": {
		"prefix": "sapphireslashsubcmd",
		"body": [
			"import { ChatInputCommand } from \"@sapphire/framework\";",
			"import { Subcommand } from \"@sapphire/plugin-subcommands\";",
			"",
			"export class {1:Ping}Command extends Subcommand {",
			"  public constructor(context: Subcommand.Context, options: Subcommand.Options) {",
			"    super(context, {",
			"      ...options,",
			"      requiredUserPermissions: [\"SendMessages\"],",
			"      requiredClientPermissions: [\"SendMessages\"],",
			"      subcommands: [",
			"        {",
			"          name: \"{2:check}\",",
			"          chatInputRun: \"${3:check}\",",
			"        },",
			"      ],",
			"    });",
			"  }",
			"",
			"  public override registerApplicationCommands(",
			"    registry: ChatInputCommand.Registry",
			"  ) {",
			"    registry.registerChatInputCommand(",
			"      (builder) =>",
			"        builder",
			"          .setName(\"${4:ping}\")",
			"          .setDescription(\"${5:Check the latency of the bot}\")",
			"          .addSubcommand((subcmd) =>",
			"            subcmd",
			"              .setName(\"${5:check}\")",
			"              .setDescription(\"${6:Check}\")",
			"          ),",
			"      // { guildIds: [ 'TESTID' ] }, // Uncomment this line to register the command in a specific guild",
			"    );",
			"  }",
			"",
			"  public subCmdName(interaction: Subcommand.ChatInputCommandInteraction) {",
			"    $0",
			"  }",
			"}",
			""
		],
		"description": "Sapphire Slash Subcommand"
	},
	"Mongoose Schema": {
		"prefix": "mongooseschema",
		"body": [
			"import mongoose from 'mongoose';",
			"",
			"const schema = new mongoose.Schema({",
			"  _id: {",
			"    type: String,",
			"    required: true,",
			"  },",
			"  $0",
			"});",
			"",
			"export default mongoose.model('${1:schema-name}', schema, '${2:schema-name}');"
		],
		"description": "Mongoose Schema"
	}
}